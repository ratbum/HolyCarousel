// Generated by CoffeeScript 1.6.3
(function() {
  var MACheckBoxTree,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MACheckBoxTree = (function() {
    MACheckBoxTree.prototype._domRef = null;

    MACheckBoxTree.prototype._checkBoxes = null;

    MACheckBoxTree.prototype._default = ['N/A'];

    function MACheckBoxTree() {
      this.get = __bind(this.get, this);
      this.reset = __bind(this.reset, this);
      this.set = __bind(this.set, this);
      if (arguments.length) {
        this.initWithJQ.apply(this, arguments);
      }
    }

    MACheckBoxTree.prototype.initWithJQ = function(jq) {
      this._domRef = jq;
      return this._checkBoxes = this._domRef.querySelectorAll('input[type=checkbox]');
    };

    MACheckBoxTree._getCheckBoxText = function(el) {
      return el.parentNode.textContent.trim();
    };

    MACheckBoxTree.prototype.set = function(stringsToCheck) {
      var checkBox, stringToCheck, _i, _len, _ref, _results;
      _ref = this._checkBoxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checkBox = _ref[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = stringsToCheck.length; _j < _len1; _j++) {
            stringToCheck = stringsToCheck[_j];
            _results1.push(checkBox.checked = MACheckBoxTree._getCheckBoxText(checkBox) === stringToCheck);
          }
          return _results1;
        })());
      }
      return _results;
    };

    MACheckBoxTree.prototype.reset = function() {
      var checkBox, directChild, parent, _i, _len, _ref, _results;
      _ref = this._checkBoxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checkBox = _ref[_i];
        parent = checkBox.parentNode;
        directChild = true;
        while (parent.id === domRef.id && directChild) {
          if (parent.nodeName.toLowerCase() === 'div') {
            directChild = false;
          }
          parent = parent.parentNode;
        }
        _results.push(checkBox.checked = directChild && MACheckBoxTree._getCheckBoxText(checkBox) === 'N/A');
      }
      return _results;
    };

    MACheckBoxTree.prototype.get = function() {
      var checkBox, checkedVals, _i, _len, _ref;
      checkedVals = [];
      _ref = this._checkBoxes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checkBox = _ref[_i];
        if (checkBox.checked) {
          checkedVals.push(MACheckBoxTree._getCheckBoxText(checkBox));
        }
      }
      return checkedVals;
    };

    return MACheckBoxTree;

  })();

}).call(this);
